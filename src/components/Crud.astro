---
interface Props {
  items: any[]|null;
  title: string;
  onAdd?: string;
  onEdit?: (item: any) => string;
  onDelete?: (item: any) => string;
  renderItem: (item: any) => string;
}

const {
  items,
  title,
  onAdd,
  onEdit,
  onDelete,
  renderItem
} = Astro.props;
---
<div class="w-full max-w-3xl mx-auto p-4">
  <div class="flex justify-between items-center mb-6">
    <h2 class="text-xl font-semibold text-gray-800 dark:text-gray-200">{title}</h2>
    {onAdd && (
      <button
        class="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition-colors"
        onclick={`window.${onAdd}.showModal()`}
      >
        Agregar
      </button>
    )}
  </div>

  <div class="flex flex-col space-y-2">
    {items?.map((item, index) => (
      <div class="flex text-gray-200 dark:text-gray-800 dark:bg-gray-100 bg-gray-700 justify-between items-center p-4 bg-gray-50 rounded-lg">
        <div class="flex-1">
          {renderItem(item)}
        </div>
        <div class="flex gap-2">
          {onEdit && (
            <button
              class="px-4 py-2 bg-yellow-400 text-gray-800 rounded hover:bg-yellow-500 transition-colors"
              onclick={`window.${onEdit(item)}.showModal()`}
            >
              Editar
            </button>
          )}
          {onDelete && (
            <button
              class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition-colors"
              onclick={`window.${onDelete(item)}.showModal()`}
            >
              Eliminar
            </button>
          )}
        </div>
      </div>
    ))}
  </div>
</div>